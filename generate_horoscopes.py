import logging
import datetime
import os
from dotenv import load_dotenv
from openai import OpenAI

from horoscope_utils import ZODIAC_SIGNS, load_cache, save_cache
from text_utils import trim_text

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise RuntimeError(
        "OPENAI_API_KEY environment variable not set. Add it to your .env file."
    )
client = OpenAI(api_key=OPENAI_API_KEY)

PROMPT_TEMPLATE = (
    "Ты — digital-друг, который пишет самый смешной, мемный, но очень тёплый и "
    "поддерживающий гороскоп на сегодня для знака {sign}. "
    "Пиши абсолютно без мистики, магии, предсказаний судьбы и ‘удачных дней’. Никаких звёзд, чисел, астрологических клише, шаманских заклинаний и ‘Марса в пятом доме’! "
    "Главное — атмосфера настоящей дружбы, чувство юмора, самоирония и чуткая поддержка. Пиши так, чтобы человек почувствовал: ‘вот это меня знают и реально подбодрили!’\n\n"
    "Структура ответа:\n"
    "1. Начни с эмоционального хука: выбери мемный или бытовой пример, который срезонирует с жизнью знака {sign} сегодня (можешь упомянуть мемы про лень, прокрастинацию, мечты о больших делах, сообщения, которые ‘лежали в голове две недели’ и внезапный прилив вдохновения). \n"
    "2. Сделай остроумный переход к главной мысли дня: чем этот день уникален, что можно увидеть по-новому, что отпустить и где ‘разрешить себе фигню’. \n"
    "3. Дай 2–3 “совета от друга”: это не инструкция, а шуточно-реалистичный разгон, что сегодня можно ‘забить на работу ради 15 минут мемов’, ‘не бояться написать “прости, забыл” старому другу’, ‘выгулять свою прокрастинацию как породистого пса’. \n"
    "4. Добавь мини-историю, как будто сам недавно попал в забавную или странную ситуацию (можно про курьера, который опять привёз чай вместо кофе, или вечную борьбу с будильником, или героический поход в магазин в тапочках).\n"
    "5. Заверши поддержкой — искренней и с юмором: ‘Даже если сегодня все планы рассыпались как печеньки в рюкзаке — ты всё равно на коне, просто этот конь любит отдыхать на диване’.\n\n"
    "Обязательные правила:\n"
    "- Не упоминай магию, планеты, числа, ‘удачу’, ‘энергию’, не предсказывай будущее, не используй астрологические стереотипы.\n"
    "- Можно вставлять отсылки к популярным мемам, сериалам, блогерам, офисной или студенческой жизни, но не делай это единственным содержанием — главное, чтобы всё было к месту.\n"
    "- Используй бытовые сравнения: бытовуха, “рабочая лошадка”, “забытый зум”, “кружка, которую так и не помыл”, “проверка мемов вместо важных дел”.\n"
    "- Каждый раз текст должен быть уникальным, избегай одинаковых фраз и советов.\n"
    "- Не делай коротко — минимум 2-3 абзаца, максимум 6, чтобы реально было что прочитать и улыбнуться.\n"
    "- Отвечай так, будто ты давний друг, который пережил с читателем все его “эпичные” и забавные фейлы.\n"
    "- Пиши просто, понятно, без заумных оборотов, но остроумно и с огоньком.\n\n"
    "Примеры поворотов, которые можно использовать (не цитировать дословно, а брать как идею):\n"
    "- ‘Сегодня день, когда ты наконец-то поймёшь, почему носки всегда теряются только по одному.’\n"
    "- ‘Твои планы на день? Они как кофе в офисе — иногда растворяются ещё до обеда, но настроение можно спасти мемом с котом.’\n"
    "- ‘Если кто-то скажет “действуй!”, действуй… но только после того, как полистаешь мемасы.’\n"
    "- ‘Переписка сегодня заиграет как серенада под балконом, если рискнёшь первым написать. А если нет — будет мем про “зависшие диалоги”.’\n"
    "- ‘Если на пути появится неудача — подари ей стикер и иди дальше. Твой день всё равно будет лучше, чем у того, кто забыл зарядить телефон.’\n\n"
    "В итоге читатель должен почувствовать, что даже если день не идеален, над этим можно посмеяться и двигаться дальше. Мотивация — через юмор, тепло и дружбу.\n"
    "Не повторяйся из раза в раз. Гороскоп должен быть свежим, мемным, ярким и искренним. Не утомляй нравоучениями, не используй скучные шаблоны.\n"
    "Пиши с реальным желанием порадовать и подбодрить — будто бы ты сейчас лично звонишь другу и рассказываешь историю за чашкой чая, а не строчишь текст ради галочки.\n"
    "Важно: итоговый текст гороскопа должен быть не длиннее 1000 токенов (с пробелами), но не короче 300 токенов. Пиши лаконично, без “воды”, только самое яркое, поддерживающее и мемное — всё как друг, но компактно!\n"
    "Заканчивай гороскоп завершённым предложением."
)

EMOTIONAL_HOROSCOPE_PROMPT = (
    "Напиши гороскоп для знака {sign}, который читается как часть сериала — с интригой, эмоциями и неожиданным поворотом.\n"
    "Гороскоп должен быть живым, ярким и вызывать желание следить за развитием событий: пусть будет как мини-история с началом, завязкой и намёком на продолжение. "
    "Не используй мистику, не пиши о числах и “магии”, но добавь искреннюю поддержку, лёгкий юмор и чуть-чуть самоиронии.\n"
    "Пусть у читателя возникает ощущение: 'Вот оно, про меня!' — как будто автор реально в курсе его жизни и настроения. "
    "В тексте должен быть живой персонаж (сам читатель), внутренняя мотивация и желание узнать, что будет дальше.\n"
    "Сделай финал с триггером: 'Хочешь узнать, чем закончится? Следи за гороскопом завтра.'\n"
    "Важно: итоговый текст гороскопа должен быть не длиннее 1000 токенов (с пробелами), но не короче 300 токенов. Пиши лаконично, без “воды”, только самое яркое, поддерживающее !\n"
    "Заканчивай гороскоп завершённым предложением."
)


def generate_all_horoscopes(mode: str = "meme"):
    """Generate fresh horoscopes for all signs and save them to cache."""
    logger.info("Starting horoscope generation")
    cache = load_cache(mode)
    horoscopes = cache.get("horoscopes", {})
    errors = False
    template = PROMPT_TEMPLATE if mode == "meme" else EMOTIONAL_HOROSCOPE_PROMPT
    for name, code in ZODIAC_SIGNS.items():
        prompt = template.format(sign=name)
        try:
            logger.info("Requesting horoscope for %s", name)
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1000,
                temperature=0.8,
            )
            text = response.choices[0].message.content.strip()
            text = trim_text(text)
            logger.info("Received %s: %s", name, text[:100])
        except Exception:
            logger.exception("Error generating %s with key %s", code, OPENAI_API_KEY[:6])
            text = horoscopes.get(code) or "Сегодня гороскоп не найден, попробуйте позже."
            errors = True
        horoscopes[code] = text
    date = datetime.date.today().isoformat()
    if errors:
        date = cache.get("date", "")
    data = {
        "date": date,
        "horoscopes": horoscopes,
    }
    save_cache(data, mode)
    return data


if __name__ == "__main__":
    import sys

    mode = "meme"
    if len(sys.argv) > 1 and sys.argv[1] in {"meme", "normal"}:
        mode = sys.argv[1]
    generate_all_horoscopes(mode)
